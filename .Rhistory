hist(x,main="Distribution asymétrique positive")
x = rchisq(1000,3)
x = (max(x)+1)-x
cat("Indice de symétrie = ", skewness(x))
hist(x,main="Distribution asymétrique négative")
x = rchisq(1000,3)
cat("Indice de symétrie = ", skewness(x))
hist(x,main="Distribution asymétrique positive")
range(x)
x = rnorm(1000,100,15)
cat("Indice de symétrie = ", skewness(x))
hist(x,main="Distribution symétrique",breaks=20)
x = rchisq(1000,3)
cat("Indice de symétrie = ", skewness(x))
hist(x,main="Distribution asymétrique positive",breaks=20)
x = rchisq(1000,3)
x = (max(x)+1)-x
cat("Indice de symétrie = ", skewness(x))
hist(x,main="Distribution asymétrique négative",breaks=20)
x = rchisq(1000,3)
x = (max(x)+1)-x
cat("Indice de symétrie = ", skewness(x))
hist(x,main="Distribution asymétrique négative",breaks=20)
x = rchisq(1000,5)
x = (max(x)+1)-x
cat("Indice de symétrie = ", skewness(x))
hist(x,main="Distribution asymétrique négative",breaks=20)
install.packages("PearsonDS")
library(PearsonDS)
library("PearsonDS")
moments <- c(mean = 0,variance = 1,skewness = 1.5, kurtosis = 4)
rpearson(10, moments = moments)
rpearson(1000, moments = moments)
x=rpearson(1000, moments = moments)
hist(x)
moments <- c(mean = 0,variance = 1,skewness = 0, kurtosis = 4)
x=rpearson(1000, moments = moments)
hist(x)
moments <- c(mean = 0,variance = 1,skewness = 0, kurtosis = -4)
x=rpearson(1000, moments = moments)
moments <- c(mean = 0,variance = 1,skewness = 0, kurtosis = -1)
x=rpearson(1000, moments = moments)
library(PearsonDS)
moments <- c(mean = 0,variance = 1,skewness = 0, kurtosis = 0)
x = rpearson(1000,moments=moments)
library(PearsonDS)
moments <- c(mean = 0,variance = 1,skewness = -0.01, kurtosis = 0)
x = rpearson(1000,moments=moments)
## Define moments of distribution
moments <- c(mean=1,variance=2,skewness=1,kurtosis=5)
## Generate some random variates
rpearson(5,moments=moments)
## evaluate distribution function
ppearson(seq(-2,3,by=1),moments=moments)
## evaluate density function
dpearson(seq(-2,3,by=1),moments=moments)
## evaluate quantile function
qpearson(seq(0.1,0.9,by=0.2),moments=moments)
install.packages("gsl")
library(gsl)
## Define moments of distribution
moments <- c(mean=1,variance=2,skewness=1,kurtosis=5)
## Generate some random variates
rpearson(5,moments=moments)
## evaluate distribution function
ppearson(seq(-2,3,by=1),moments=moments)
## evaluate density function
dpearson(seq(-2,3,by=1),moments=moments)
## evaluate quantile function
qpearson(seq(0.1,0.9,by=0.2),moments=moments)
pearsonDiagram()
## define Pearson type I parameter set with a=2, b=3, location=1, scale=2
pIpars <- list(a=2, b=3, location=1, scale=2)
## calculate probability density function
dpearsonI(seq(1,3,by=0.5),params=pIpars)
## calculate cumulative distribution function
ppearsonI(seq(1,3,by=0.5),params=pIpars)
## calculate quantile function
qpearsonI(seq(0.1,0.9,by=0.2),params=pIpars)
## generate random numbers
rpearsonI(5,params=pIpars)
pIpars
x=rpearsonI(5000,params=pIpars)
hist(x)
# Required for kurtosis() function
library(moments)
# Defining data vector
x <- c(rep(61, each = 10), rep(64, each = 18),
rep(65, each = 23), rep(67, each = 32), rep(70, each = 27),
rep(73, each = 17))
# output to be present as PNG file
png(file = "platykurtic.png")
# Print skewness of distribution
print(kurtosis(x))
# Histogram of distribution
hist(x)
# Saving the file
dev.off()
hist(x)
fs = function(x,epsilon,delta) dnorm(sinh(delta*asinh(x)-epsilon))*delta*cosh(delta*asinh(x)-epsilon)/sqrt(1+x^2)
vec = seq(-15,15,0.001)
plot(vec,fs(vec,0,1),type="l")
points(vec,fs(vec,1,1),type="l",col="red")
points(vec,fs(vec,2,1),type="l",col="blue")
points(vec,fs(vec,-1,1),type="l",col="red")
points(vec,fs(vec,-2,1),type="l",col="blue")
vec = seq(-5,5,0.001)
plot(vec,fs(vec,0,0.5),type="l",ylim=c(0,1))
points(vec,fs(vec,0,0.75),type="l",col="red")
points(vec,fs(vec,0,1),type="l",col="blue")
points(vec,fs(vec,0,1.25),type="l",col="red")
points(vec,fs(vec,0,1.5),type="l",col="blue")
skew <-function(x,p) {
k = length(x)
m = sum(x*p)
v = sum( (x-m)^2 *p)
m3 = sum( (x-m)^3 *p)
sk = m3/v^1.5
return(sk)
}
kurt <-function(x,p) {
k = length(x)
m = sum(x*p)
v = sum( (x-m)^2 *p)
m4 = sum( (x-m)^4 *p)
k = m4/v^2
return(k)
}
#Example 1: Flat-topped leptokurtic distribution
x = c(1:4,10)
p = c(.24,.24,.24,.24,.04)
skew(x,p)
kurt(x,p)
plot(x,p, type="h", lwd=2, ylim = c(0, max(p)*1.2))
x = rnorm(1000,100,15)
skew(x,p)
p = c(.2,.3,.4,.3,.2)
skew(x,p)
kurt(x,p)
p = c(rep(.08,4), .36, rep(.08,4))
kurt(x,p)
install.packages("mnonr")
library(mnonr)
mnonr::mnonr(n=10000,p=2,ms=3,mk=61,Sigma=matrix(c(1,0.5,0.5,1),2,2),initial=NULL)
unonr(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(1, 2), kurtosis = c(3, 8))
x =unonr(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(1, 2), kurtosis = c(3, 8))
hist(x)
x =unonr(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(1, 2), kurtosis = c(3, 15))
hist(x)
x =unonr(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(1, 2), kurtosis = c(3, -4))
hist(x)
x =unonr(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(0, 0), kurtosis = c(3, -4))
hist(x)
x =unonr(1000, 1, 1, skewness = 0, kurtosis = -4)
x =unonr(1000, matris(1, 1,1), skewness = 0, kurtosis = -4)
x =unonr(1000, matrix(1, 1,1), skewness = 0, kurtosis = -4)
x =unonr(1000, matrix(1, 1,1), sigma=1,skewness = 0, kurtosis = -4)
x =unonr(1000, matrix(1, 1,1), Sigma=1,skewness = 0, kurtosis = -4)
install.packages("SimMultiCorrData")
library(SimMultiCorrData)
nonnormvar1(method = c("Fleishman", "Polynomial"), means = 0, vars = 1,
skews = 0, skurts = 0, fifths = 0, sixths = 0, Six = NULL,
cstart = NULL, n = 10000, seed = 1234)
plot.new()
# Simulation du lancer de 5 dés
Cinq.Des <- function(){
Des <- sample(1:6, size = 5, replace = TRUE)
return(sum(Des))
}
# Rédigez votre code R sous cette ligne
# N'inscrivez rien sous cette ligne
# Simulation du lancer de 5 dés
Cinq.Des <- function(){
Des <- sample(1:6, size = 5, replace = TRUE)
return(sum(Des))
}
# Rédigez votre code R sous cette ligne
x = tuy+1
nonnormvar1(method = c("Fleishman", "Polynomial"), means = 0, vars = 1,
skews = 0, skurts = 0, fifths = 0, sixths = 0, Six = NULL,
cstart = NULL, n = 10000, seed = 1234)
nonnormvar1(method = c("Fleishman", "Polynomial"), means = 0, vars = 1,
skews = 0, skurts = -3, fifths = 0, sixths = 0, Six = NULL,
cstart = NULL, n = 10000, seed = 1234)
nonnormvar1(method = "Polynomial", means = 0, vars = 1,
skews = 0, skurts = -3, fifths = 0, sixths = 0, Six = NULL,
cstart = NULL, n = 100, seed = 1234)
nonnormvar1(method = "Polynomial", means = 0, vars = 1,
skews = 0, skurts = -3, fifths = 0, sixths = 0, Six = NULL,
cstart = NULL, n = 100, seed = 1234)
# Normal distribution with Headrick's fifth-order PMT:
N <- nonnormvar1("Polynomial", 0, 1, 0, 0, 0, 0)
N
# Normal distribution with Headrick's fifth-order PMT:
N <- nonnormvar1("Polynomial", 0, 1, 0, -2, 0, 0)
find_constants(method = c("Fleishman", "Polynomial"), skews = NULL,
skurts = NULL, fifths = NULL, sixths = NULL, Six = NULL,
cstart = NULL, n = 25, seed = 1234)
find_constants("Fleishman", 2, 6)
find_constants("Fleishman", 0,1,0,-2,0,0, 6)
find_constants(method = c("Fleishman", "Polynomial"), skews = NULL,
skurts = -2, fifths = NULL, sixths = NULL, Six = NULL,
cstart = NULL, n = 25, seed = 1234)
find_constants(method = "Fleishman", skews = NULL,
skurts = -2, fifths = NULL, sixths = NULL, Six = NULL,
cstart = NULL, n = 25, seed = 1234)
N <- nonnormvar1("Polynomial", 0, 1, 0, 0, 0, 0)
N
N <- nonnormvar1("Polynomial", 0, 1, 0, 0, 0, 0)
hist(N)
H_exp <- nonnormvar1("Polynomial", means = 2, vars = 2, skews = stcums[3],
skurts = stcums[4], fifths = stcums[5],
sixths = stcums[6], n = 10000, seed = 1234)
N <- nonnormvar1("Polynomial", 0, 1, 0, 0, 0, 0)
stcums <- calc_theory(Dist = "Exponential", params = 0.5) # rate = 1/mean
H_exp <- nonnormvar1("Polynomial", means = 2, vars = 2, skews = stcums[3],
skurts = stcums[4], fifths = stcums[5],
sixths = stcums[6], n = 10000, seed = 1234)
hist(H_exp)
hist(as.numeric(H_exp)
)
H_exp$constants
H_exp$valid.pdf
x=unonr(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(1, 2), kurtosis = c(3, 8))
x
hist(x[[1]])
hist(x[,1])
hist(x[,2])
x=unonr(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(0, 0), kurtosis = c(3, 8))
hist(x[,1])
hist(x[,2])
x=unonr(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(0, 0), kurtosis = c(-4, 4))
hist(x[,2])
hist(x[,1])
x=unonr(1000, c(1, 2), matrix(c(10, 2, 1,2,2,2,2,2, 5), 3, 3), skewness = c(-2,0,2), kurtosis = c(-3, 0, 3))
x=unonr(1000, c(1, 2,0), matrix(c(1,1,1,1,1,1,1,1,1), 3, 3), skewness = c(-2,0,2), kurtosis = c(-3, 0, 3))
x=unonr(1000, c(1, 2,0), matrix(c(1,0,0,0,1,0,0,0,1), 3, 3), skewness = c(-2,0,2), kurtosis = c(-3, 0, 3))
x
x[,1]
hist(x[,1])
hist(x[,2])
hist(x[,3])
x=unonr(1000, c(1, 2,0), matrix(c(1,0,0,0,1,0,0,0,1), 3, 3), skewness = c(0,0,0), kurtosis = c(-3, 0, 3))
hist(x[,3])
hist(x[,2])
hist(x[,1])
x=unonr(1000, c(1, 2,0), matrix(c(1,0,0,0,1,0,0,0,1), 3, 3), skewness = c(0,0,0), kurtosis = c(-1, 0, 3))
hist(x[,1])
hist(x[,2])
hist(x[,3])
diag(3)
library(mnonr)
x = unonr(1000, rep(0,3), diag(3), 3, 3), skewness = c(0,0,0), kurtosis = c(-3, 0, 3))
library(mnonr)
x = unonr(1000, rep(0,3), diag(3), skewness = c(0,0,0), kurtosis = c(-3, 0, 3))
hist(x[,1],main="Distribution platykurtique")
hist(x[,2],main="Distribution mésokurtique")
hist(x[,3],main="Distribution leptokurtique")
library(mnonr)
x = unonr(1000, rep(0,3), diag(3), skewness = c(0,0,0), kurtosis = c(-1, 0, 3))
hist(x[,1],main="Distribution platykurtique")
cat("Indice de Voussure = ",kurtosis(x[,1]))
hist(x[,2],main="Distribution mésokurtique")
cat("Indice de Voussure = ",kurtosis(x[,2]))
hist(x[,3],main="Distribution leptokurtique")
cat("Indice de Voussure = ",kurtosis(x[,3]))
library(mnonr)
x = unonr(1000, rep(0,3), diag(3), skewness = c(0,0,0), kurtosis = c(-1, 0, 3))
hist(x[,1],main="Distribution platykurtique")
cat("Indice de Voussure = ",kurtosis(x[,1])-3)
hist(x[,2],main="Distribution mésokurtique")
cat("Indice de Voussure = ",kurtosis(x[,2])-3)
hist(x[,3],main="Distribution leptokurtique")
cat("Indice de Voussure = ",kurtosis(x[,3])-3)
library(mnonr)
x = unonr(1000, rep(0,3), diag(3), skewness = c(-2,0,2), kurtosis = c(0, 0, 0))
hist(x[,1],main="Distribution asymétrique négative",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,1])-3)
hist(x[,2],main="Distribution symétrique",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,2])-3)
hist(x[,3],main="Distribution asymétrique positive",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,3])-3)
library(mnonr)
x = unonr(1000, rep(0,3), diag(3), skewness = c(-2,0,2), kurtosis = c(0, 0, 0))
hist(x[,1],main="Distribution asymétrique négative",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,1]))
hist(x[,2],main="Distribution symétrique",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,2]))
hist(x[,3],main="Distribution asymétrique positive",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,3]))
library(mnonr)
x = unonr(1000, rep(0,3), diag(3), skewness = c(-1,0,1), kurtosis = c(0, 0, 0))
hist(x[,1],main="Distribution asymétrique négative",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,1]))
hist(x[,2],main="Distribution symétrique",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,2]))
hist(x[,3],main="Distribution asymétrique positive",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,3]))
library(mnonr)
x = unonr(10000, rep(0,3), diag(3), skewness = c(-1,0,1), kurtosis = c(0, 0, 0))
hist(x[,1],main="Distribution asymétrique négative",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,1]))
hist(x[,2],main="Distribution symétrique",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,2]))
hist(x[,3],main="Distribution asymétrique positive",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,3]))
library(mnonr)
x = unonr(10000, rep(0,3), diag(3), skewness = c(-1,0,1), kurtosis = c(0, 0, 0),empirical = TRUE)
hist(x[,1],main="Distribution asymétrique négative",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,1]))
hist(x[,2],main="Distribution symétrique",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,2]))
hist(x[,3],main="Distribution asymétrique positive",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,3]))
library(mnonr)
x = unonr(10000, rep(0,3), diag(3), skewness = c(-.5,0,.5), kurtosis = c(0, 0, 0),empirical = TRUE)
hist(x[,1],main="Distribution asymétrique négative",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,1]))
hist(x[,2],main="Distribution symétrique",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,2]))
hist(x[,3],main="Distribution asymétrique positive",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,3]))
library(mnonr)
x = unonr(10000, rep(0,3), diag(3), skewness = c(-.9,0,.9), kurtosis = c(0, 0, 0),empirical = TRUE)
hist(x[,1],main="Distribution asymétrique négative",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,1]))
hist(x[,2],main="Distribution symétrique",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,2]))
hist(x[,3],main="Distribution asymétrique positive",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,3]))
library(mnonr)
x = unonr(10000, rep(0,3), diag(3), skewness = c(-.8,0,.8), kurtosis = c(0, 0, 0),empirical = TRUE)
hist(x[,1],main="Distribution asymétrique négative",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,1]))
hist(x[,2],main="Distribution symétrique",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,2]))
hist(x[,3],main="Distribution asymétrique positive",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,3]))
library(mnonr)
x = unonr(10000, rep(0,3), diag(3), skewness = c(-.7,0,.7), kurtosis = c(0, 0, 0),empirical = TRUE)
hist(x[,1],main="Distribution asymétrique négative",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,1]))
hist(x[,2],main="Distribution symétrique",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,2]))
hist(x[,3],main="Distribution asymétrique positive",breaks=20)
cat("Indice de Symétrie = ",skewness(x[,3]))
library(mnonr)
x = unonr(1000, rep(0,3), diag(3), skewness = c(0,0,0), kurtosis = c(-0.5, 0, 3))
hist(x[,1],main="Distribution platykurtique")
cat("Indice de Voussure = ",kurtosis(x[,1])-3)
hist(x[,2],main="Distribution mésokurtique")
cat("Indice de Voussure = ",kurtosis(x[,2])-3)
hist(x[,3],main="Distribution leptokurtique")
cat("Indice de Voussure = ",kurtosis(x[,3])-3)
library(mnonr)
x = unonr(10000, rep(0,3), diag(3), skewness = c(0,0,0), kurtosis = c(-0.5, 0, 3))
hist(x[,1],main="Distribution platykurtique")
cat("Indice de Voussure = ",kurtosis(x[,1])-3)
hist(x[,2],main="Distribution mésokurtique")
cat("Indice de Voussure = ",kurtosis(x[,2])-3)
hist(x[,3],main="Distribution leptokurtique")
cat("Indice de Voussure = ",kurtosis(x[,3])-3)
library(mnonr)
x = unonr(10000, rep(0,3), diag(3), skewness = c(0,0,0), kurtosis = c(-0.6, 0, 3))
hist(x[,1],main="Distribution platykurtique")
cat("Indice de Voussure = ",kurtosis(x[,1])-3)
hist(x[,2],main="Distribution mésokurtique")
cat("Indice de Voussure = ",kurtosis(x[,2])-3)
hist(x[,3],main="Distribution leptokurtique")
cat("Indice de Voussure = ",kurtosis(x[,3])-3)
diag(3,15)
diag(3)*15
diag(x=15,nrow=3)
diag(x=15)
library(mnonr)
x = unonr(10000, rep(0,100), diag(x=15,nrow=3), skewness = c(0,0,0), kurtosis = c(-0.6, 0, 3))
library(mnonr)
x = unonr(10000, rep(0,100), diag(3)*15, skewness = c(0,0,0), kurtosis = c(-0.6, 0, 3))
rep(100,3)
library(mnonr)
x = unonr(10000, rep(100,3), diag(3)*15, skewness = c(0,0,0), kurtosis = c(-0.6, 0, 3))
hist(x[,1],main="Distribution platykurtique")
cat("Indice de Voussure = ",kurtosis(x[,1])-3)
hist(x[,2],main="Distribution mésokurtique")
cat("Indice de Voussure = ",kurtosis(x[,2])-3)
hist(x[,3],main="Distribution leptokurtique")
cat("Indice de Voussure = ",kurtosis(x[,3])-3)
(a=2+5)
a
x = c(rep("Cat 1",2),rep("Cat 2",8),rep("Cat 3",3),rep("Cat 4",4),rep("Cat 5",10),rep("Cat 6",2),rep("Cat 7",4))
tbl = table(x)
tbl
barplot(tbl)
library(agrmt)
(md = modes(tbl,tolerance=2))
cat("Fréquence(s) Modale(s) = ",tbl[md$mode])
v <- c(1, 2, 5, 9)
mode(v)
install.packages("installr")
library(installr)
updateR()
version
x =rbinom(200,6,.5)
tbl=table(x)
class(tbl)
tbl
rank(x)
library(formatR)
install.packages("formatR")
install.packages("pacman")
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
categor = c("Parfaitement d'accord", "D'accord", "Un peu d'accord", "Neutre", "Un peu en désaccord","En désaccord", "Parfaitement en désaccord")
xrec = as.numeric(mapvalues(x, from = categor, to = c(1:7)))
median(xrec)
summary(xrec)
quantile(xrec,0.5)
library(psych)
t(describe(xrec))
library(plyr)
categor = c("Parfaitement d'accord", "D'accord", "Un peu d'accord", "Neutre", "Un peu en désaccord","En désaccord", "Parfaitement en désaccord")
xrec = as.numeric(mapvalues(x, from = categor, to = c(1:7)))
median(xrec)
summary(xrec)
quantile(xrec,0.5)
library(psych)
t(describe(xrec))
library(plyr)
categor = c("Parfaitement d'accord", "D'accord", "Un peu d'accord", "Neutre", "Un peu en désaccord","En désaccord", "Parfaitement en désaccord")
xrec = as.numeric(mapvalues(x, from = categor, to = c(1:7)))
median(xrec)
summary(xrec)
quantile(xrec,0.5)
library(psych)
t(describe(xrec))
categor
xrec
table(xrec)
length(categor)
unique(x)
library(wakefield)
n = 500
x = likert_7(n,x = c("Parfaitement d'accord", "D'accord", "Un peu d'accord", "Neutre", "Un peu en désaccord","En désaccord",    "Parfaitement en désaccord"),prob = c(4,6,3,2,3,4,5),name = "Opinion")
library(plyr)
categor = c("Parfaitement d'accord", "D'accord", "Un peu d'accord", "Neutre", "Un peu en désaccord","En désaccord", "Parfaitement en désaccord")
xrec = as.numeric(mapvalues(x, from = categor, to = c(1:7)))
median(xrec)
summary(xrec)
quantile(xrec,0.5)
library(psych)
t(describe(xrec))
q()
6/y
6/u
Sys.setenv(LANG = "fr")
6/u
q()
q()
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
## "C:\\rtools40\\usr\\bin\\make.exe"
Sys.which("make")
install.packages("jsonlite", type = "source")
setwd("I:/isteahTEST")
library(devtools)
library(roxygen2)
document()
#' Draw 3 cards: BlackJack
#'
#'@param n draws (integer value, default = 30)
#'@return sum of card values for each draw
#'@importFrom dplyr "%>%"
#'
BlackJack <- function(n = 30) {
card_suits <- c("Pique", "Coeur", "Carreau", "Trèfle")
card_names <- c("As", "Roi", "Reine", "Valet", "10", "9", "8", "7", "6", "5", "4", "3",
"2")
card_values <- c(1, 10, 10, 10, 10:2)
n_suits <- length(card_suits)
card_deck <- expand.grid(card_names, card_suits)
card_deck <- card_deck %>%
tidyr::unite("Cards", c(1, 2), sep = "_", remove = TRUE) %>%
tidyr::mutate(Values = rep(card_values, n_suits))
sample_sums <- rep(NA, n)
cards <- rep(NA, n)
for (i in 1:n) {
cards[i] <- list(sample(card_deck$Cards, size = 3, replace = FALSE))
Card_val <- card_deck$Values[card_deck$Cards %in% cards[[i]]]
sample_sums[i] <- sum(Card_val) + 10 * (sum(Card_val == 1) > 0 & sum(Card_val) <= 11)
}
return(sample_sums)
}
BlackJack()
document()
document()
BlackJack()
load_all()
BlackJack()
rm(list = c("BlackJack", "CoinToss", "DiceRoll", "permute", "polyUrn", "RandBin", "RandPop", "SampDistr", "SampleAnalysis", "TblFreq", "TblFreq2"))
document()
load_all()
document()
load_all()
BlackJack()
document()
load_all()
BlackJack()
BlackJack()
document()
load_all()
BlackJack()
setwd("I:/MAT104/isteahMAT104")
