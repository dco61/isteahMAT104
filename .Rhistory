Sys.which("make")
## "C:\\rtools40\\usr\\bin\\make.exe"
Sys.which("make")
install.packages("jsonlite", type = "source")
setwd("I:/isteahTEST")
library(devtools)
library(roxygen2)
document()
#' Draw 3 cards: BlackJack
#'
#'@param n draws (integer value, default = 30)
#'@return sum of card values for each draw
#'@importFrom dplyr "%>%"
#'
BlackJack <- function(n = 30) {
card_suits <- c("Pique", "Coeur", "Carreau", "Trèfle")
card_names <- c("As", "Roi", "Reine", "Valet", "10", "9", "8", "7", "6", "5", "4", "3",
"2")
card_values <- c(1, 10, 10, 10, 10:2)
n_suits <- length(card_suits)
card_deck <- expand.grid(card_names, card_suits)
card_deck <- card_deck %>%
tidyr::unite("Cards", c(1, 2), sep = "_", remove = TRUE) %>%
tidyr::mutate(Values = rep(card_values, n_suits))
sample_sums <- rep(NA, n)
cards <- rep(NA, n)
for (i in 1:n) {
cards[i] <- list(sample(card_deck$Cards, size = 3, replace = FALSE))
Card_val <- card_deck$Values[card_deck$Cards %in% cards[[i]]]
sample_sums[i] <- sum(Card_val) + 10 * (sum(Card_val == 1) > 0 & sum(Card_val) <= 11)
}
return(sample_sums)
}
BlackJack()
document()
document()
BlackJack()
load_all()
BlackJack()
rm(list = c("BlackJack", "CoinToss", "DiceRoll", "permute", "polyUrn", "RandBin", "RandPop", "SampDistr", "SampleAnalysis", "TblFreq", "TblFreq2"))
document()
load_all()
document()
load_all()
BlackJack()
document()
load_all()
BlackJack()
BlackJack()
document()
load_all()
BlackJack()
setwd("I:/MAT104/isteahMAT104")
library(devtools)
install_github(dco61/isteahMAT104)
install_github("dco61/isteahMAT104")
library(isteahMAT104)
BlackJack()
BlackJack
document()
document()
load_all()
BlackJack()
document()
library(help="base")
knitr::opts_chunk$set(echo = TRUE)
racquad = function(a,b,c){
# Calcul de la quantité sous la racine carrée
num <- b^2-4*a*c
# Valeur négative? ==> Nombre complexe
if(num<0){num = as.complex(num)}
# Calcul des racines de la fonction et sortie
r <- (-b+c(1,-1)*sqrt(num))/(2*a)
return(r)
}
a <- 2.7
b <- -6.3
c <- 3.2
rac = racquad(a,b,c)
cat("Les racines de cette fonction sont: ",rac)
a <- 5.7
b <- -8.3
c <- 12.2
cat("Les racines de cette fonction sont: ",racquad(a,b,c))
# devtools::install_github(Nom_de_Compte/Nom_de_librairie)
# Exemple:
devtools::install_github(dco61/isteahMAT104)
# devtools::install_github(Nom_de_Compte/Nom_de_librairie)
# Exemple:
devtools::install_github("dco61/isteahMAT104")
detach("package:isteahMAT104", unload = TRUE)
# devtools::install_github(Nom_de_Compte/Nom_de_librairie)
# Exemple:
devtools::install_github("dco61/isteahMAT104")
setwd("I:/MAT104/isteahMAT104")
remove.packages("isteahTEST", lib="~/R/win-library/4.1")
# devtools::install_github(Nom_de_Compte/Nom_de_librairie)
# Exemple:
devtools::install_github("dco61/isteahMAT104")
library(isteahMAT104)
ndraw <- 100000  # Nombre d'expériences aléatoires (lancers de dés)
p <- c(0.3, 0.2, 0.1, 0.1, 0.1, 0.2)
obj <- c(2,2,2,1,1,2)
draw <- t(replicate(ndraw,sample(1:6,10,prob=p,replace=TRUE)))
rtbl <- rowTabulate(draw)
ndraw <- 100000  # Nombre d'expériences aléatoires (lancers de dés)
p <- c(0.3, 0.2, 0.1, 0.1, 0.1, 0.2)
obj <- c(2,2,2,1,1,2)
draw <- t(replicate(ndraw,sample(1:6,10,prob=p,replace=TRUE)))
rtbl <- Rfast::rowTabulate(draw)
succes <- 0
for(i in 1:ndraw){
succes <- succes + (sum(rtbl[i, ]==obj)==6)
}
cat("Probabilité = ",succes/ndraw)
x <- rmultinom(20,50,prob=c(0.3,0.2,0.4,0.2))
x
x <- rmultinom(20,50,prob=c(0.3,0.2,0.4,0.2x))
x <- rmultinom(20,50,prob=c(0.3,0.2,0.4,0.2))
t(x)
ndraw <- 1000000  # Nombre d'expériences aléatoires (tirage de balles)
E <- c(6,2,1,1)   # Événement recherché (r = 2, v = 1, b = 0, o = 2)
succes <- 0       # Initialisation des variables servant au comptage
i <- 0
repeat{
draw <- polyUrn4(n=10,44,42,10,4)    # Exécution d'une expérience
i <- i + 1
if(sum(draw==E)==4){succes=succes+1}    # Est-ce un 'succès'?
if (i == ndraw){break}                  # Exercice complété?
}
ndraw <- 100000  # Nombre d'expériences aléatoires (lancers de dés)
p <- c(0.44, 0.42, 0.10, 0.04)
obj <- c(6,2,1,1)
draw <- t(replicate(ndraw,rmultinom(ndraw,10,prob=p)))
rmultinom(ndraw,10,prob=p)
rmultinom(5,10,prob=p)
ndraw <- 1000  # Nombre d'expériences aléatoires (lancers de dés)
p <- c(0.44, 0.42, 0.10, 0.04)
obj <- c(6,2,1,1)
draw <- t(replicate(ndraw,rmultinom(ndraw,10,prob=p)))
replicate(ndraw,rmultinom(ndraw,10,prob=p))
t(replicate(ndraw,rmultinom(ndraw,10,prob=p)))
ndraw <- 1000  # Nombre d'expériences aléatoires (lancers de dés)
p <- c(0.44, 0.42, 0.10, 0.04)
obj <- c(6,2,1,1)
draw <- replicate(ndraw,rmultinom(ndraw,10,prob=p))
rtbl <- Rfast::rowTabulate(draw)
draw
ndraw <- 10  # Nombre d'expériences aléatoires (lancers de dés)
p <- c(0.44, 0.42, 0.10, 0.04)
obj <- c(6,2,1,1)
draw <- replicate(ndraw,rmultinom(ndraw,10,prob=p))
rtbl <- Rfast::rowTabulate(draw)
draw
draw <- replicate(ndraw,rmultinom(ndraw,10,prob=p))
daw
draw
class(draw)
t(draw)
t(a.matrix(draw))
t(as.matrix(draw))
as.matrix(draw)
draw
draw[,1]
draw[1:4,1]
draw[1,,]
draw
ndraw <- 100  # Nombre d'expériences aléatoires (lancers de dés)
p <- c(0.44, 0.42, 0.10, 0.04)
obj <- c(6,2,1,1)
draw <- rmultinom(ndraw,10,prob=p))
ndraw <- 100  # Nombre d'expériences aléatoires (lancers de dés)
p <- c(0.44, 0.42, 0.10, 0.04)
obj <- c(6,2,1,1)
draw <- rmultinom(ndraw,10,prob=p)
rtbl <- Rfast::rowTabulate(draw)
succes <- 0
for(i in 1:ndraw){
succes <- succes + (sum(rtbl[i, ]==obj)==4)
}
draw
class(draw)
t(draw)
ndraw <- 100  # Nombre d'expériences aléatoires (lancers de dés)
p <- c(0.44, 0.42, 0.10, 0.04)
obj <- c(6,2,1,1)
draw <- t(rmultinom(ndraw,10,prob=p))
succes <- 0
for(i in 1:ndraw){
succes <- succes + (sum(draw[i, ]==obj)==4)
}
cat("Probabilité = ",succes/ndraw)
ndraw <- 10000  # Nombre d'expériences aléatoires (lancers de dés)
p <- c(0.44, 0.42, 0.10, 0.04)
obj <- c(6,2,1,1)
draw <- t(rmultinom(ndraw,10,prob=p))
succes <- 0
for(i in 1:ndraw){
succes <- succes + (sum(draw[i, ]==obj)==4)
}
cat("Probabilité = ",succes/ndraw)
ndraw <- 100000  # Nombre d'expériences aléatoires (lancers de dés)
p <- c(0.44, 0.42, 0.10, 0.04)
obj <- c(6,2,1,1)
draw <- t(rmultinom(ndraw,10,prob=p))
succes <- 0
for(i in 1:ndraw){
succes <- succes + (sum(draw[i, ]==obj)==4)
}
cat("Probabilité = ",succes/ndraw)
ndraw <- 10  # Nombre d'expériences aléatoires (lancers de dés)
p <- c(0.44, 0.42, 0.10, 0.04)
obj <- c(6,2,1,1)
draw <- t(rmultinom(ndraw,10,prob=p))
t(apply(draw,1,function(x) x==obj))
#succes <- 0
#for(i in 1:ndraw){
#  succes <- succes + (sum(draw[i, ]==obj)==4)
#}
cat("Probabilité = ",succes/ndraw)
ndraw <- 10  # Nombre d'expériences aléatoires (lancers de dés)
p <- c(0.44, 0.42, 0.10, 0.04)
obj <- c(6,2,1,1)
draw <- t(rmultinom(ndraw,10,prob=p))
succes <- t(apply(draw,1,function(x) x==obj))
#succes <- 0
#for(i in 1:ndraw){
#  succes <- succes + (sum(draw[i, ]==obj)==4)
#}
cat("Probabilité = ",succes/ndraw)
t(apply(draw,1,function(x) x==obj))
ndraw <- 10  # Nombre d'expériences aléatoires (lancers de dés)
p <- c(0.44, 0.42, 0.10, 0.04)
obj <- c(6,2,1,1)
draw <- t(rmultinom(ndraw,10,prob=p))
succes <-sum(rowSums(t(apply(draw,1,function(x) x==obj)))==4)
#succes <- 0
#for(i in 1:ndraw){
#  succes <- succes + (sum(draw[i, ]==obj)==4)
#}
cat("Probabilité = ",succes/ndraw)
ndraw <- 100000  # Nombre d'expériences aléatoires (lancers de dés)
p <- c(0.44, 0.42, 0.10, 0.04)
obj <- c(6,2,1,1)
draw <- t(rmultinom(ndraw,10,prob=p))
succes <-sum(rowSums(t(apply(draw,1,function(x) x==obj)))==4)
#succes <- 0
#for(i in 1:ndraw){
#  succes <- succes + (sum(draw[i, ]==obj)==4)
#}
cat("Probabilité = ",succes/ndraw)
cat("P(4) = ",(choose(40,4)*choose(10,1))/choose(50,5))
cat("P(4) = ",dhyper(4,10,40,5))
cat("P(4) = ",dhyper(4,40,10,5))
cat("P(X<=4) = ",phyper(4, 40, 10, 5)
cat("P(X<=4) = ",phyper(4, 40, 10, 5))
cat("P(X>=3) = ",phyper(3, 40, 10, 5, lower.tail = FALSE))
cat("P(X>=3) = ",phyper(4, 40, 10, 5, lower.tail = FALSE))
cat("X | P(x <X)=0.75 = ", qhyper(0.74,40,10,5))
cat("X | P(x <X)=0.5 = ", qhyper(0.74,40,10,5))
cat("X | P(x <X)=0.25 = ", qhyper(0.74,40,10,5))
cat("X | P(x <X)=0.05 = ", qhyper(0.74,40,10,5))
x <- rhyper(20,40,10,5)
x
x <-  rhyper(100000,40,10,5)
cat("P(X = 4) = ", mean(x == 4))
x <-  rhyper(1000000,40,10,5)
cat("P(X = 4) = ", mean(x == 4))
library(extraDistr)
install.packages("extraDistr")
library(extraDistr)
dmvhyper(c(2,1,3),c(8,3,9),6)
library(extraDistr)
x <- c(2,1,3) # nombres ciblés: 2 billes rouges, une jaune et 3 bleues
n <- c(8,3,9) # nombres de billes dans l'urne: 8 rouges, 3 jaunes et 9 bleues
k <- 6        # on tire 6 billes de l'urne
cat("P(R=2, J=1, B=3) = ", mvhyper(x, n, k))
library(extraDistr)
x <- c(2,1,3) # nombres ciblés: 2 billes rouges, une jaune et 3 bleues
n <- c(8,3,9) # nombres de billes dans l'urne: 8 rouges, 3 jaunes et 9 bleues
k <- 6        # on tire 6 billes de l'urne
cat("P(R=2, J=1, B=3) = ", dmvhyper(x, n, k))
nn <- 20
n <- c(8,3,9)
k <- 6
rmvhyper(nn,n,k)
nn <- 100
n <- c(8,3,9)
x <- c(2,1,3)
k <- 6
res <- rmvhyper(nn,n,k)
res
library(extraDistr)
ndraw <- 100
obj <- c(2,1,3) # nombres ciblés: 2 billes rouges, une jaune et 3 bleues
n <- c(8,3,9) # nombres de billes dans l'urne: 8 rouges, 3 jaunes et 9 bleues
k <- 6        # on tire 6 billes de l'urne
draw <- rmvhyper(ndraw,n,k)
succes <-sum(rowSums(t(apply(draw,1,function(x) x==obj)))==3)
cat("Probabilité = ",succes/ndraw)
library(extraDistr)
ndraw <- 100000
obj <- c(2,1,3) # nombres ciblés: 2 billes rouges, une jaune et 3 bleues
n <- c(8,3,9) # nombres de billes dans l'urne: 8 rouges, 3 jaunes et 9 bleues
k <- 6        # on tire 6 billes de l'urne
draw <- rmvhyper(ndraw,n,k)
succes <-sum(rowSums(t(apply(draw,1,function(x) x==obj)))==3)
cat("Probabilité = ",succes/ndraw)
library(extraDistr)
ndraw <- 100000
obj <- c(2,1,3) # nombres ciblés: 2 billes rouges, une jaune et 3 bleues
n <- c(8,3,9) # nombres de billes dans l'urne: 8 rouges, 3 jaunes et 9 bleues
k <- 6        # on tire 6 billes de l'urne
draw <- rmvhyper(ndraw,n,k)
succes <-sum(rowSums(t(apply(draw,1,function(x) x==obj)))==3)
cat("P(R=2, J=1, B=3) = ",succes/ndraw)
ndraw <- 100000
obj <- c(2,1,3) # nombres ciblés: 2 billes rouges, une jaune et 3 bleues
n <- c(8,3,9) # nombres de billes dans l'urne: 8 rouges, 3 jaunes et 9 bleues
k <- 6        # on tire 6 billes de l'urne
draw <- extraDistr::rmvhyper(ndraw,n,k)
succes <-sum(rowSums(t(apply(draw,1,function(x) x==obj)))==3)
cat("P(R=2, J=1, B=3) = ",succes/ndraw)
x <- 0
mu <- 0.3
cat("P(X=0 = ",dpois0, 0.3)
x <- 0
mu <- 0.3
cat("P(X=0 = ",dpois(0, 0.3)
x <- 0
mu <- 0.3
cat("P(X=0 = ",dpois(0, 0.3))
x <- c(0,1,2,3)
mu <- 0.3
cat("P(X=0 = ",dpois(0, 0.3))
x <- c(0,1,2,3)
mu <- 0.3
cat("P(X=0 = ",dpois(x, 0.3))
x <- c(0,1,2,3)
mu <- 0.3
cat("P(X=0:3) = ",dpois(x, 0.3))
rpois(20, 0.3)
nrep = 100000
x <- 0
mu <- 0.3
cat("P(X=0) = ", mean(rpois(nrep, mu)==x))
nrep = 1000000
x <- 0
mu <- 0.3
cat("P(X=0) = ", mean(rpois(nrep, mu)==x))
library(bookdown)
setwd("I:/MAT104/Notes")
render_book("index.Rmd")
setwd("I:/MAT104/isteahMAT104")
load_all()
library(devtools)
load_all()
setwd("I:/MAT104/Notes")
render_book("index.Rmd")
x <- rhyper(2000,40,10,5)
head(x,20)
hist(x,main="Distribution Hypergéométrique")
nn <- 20
n <- c(8,3,9)
k <- 6
x <- rmvhyper(nn,n,k)
head(x, 20)
counts <- table(x,col(x))
counts
nn <- 20
n <- c(8,3,9)
k <- 6
x <- rmvhyper(nn,n,k)
head(x, 20)
counts <- table(x,col(x))
barplot(counts, main="Distribution Hypergéométrique Multivariée",
xlab="X", col=c("darkblue","red","green",Èyellow),
legend = rownames(counts), beside=TRUE)
nn <- 20
n <- c(8,3,9)
k <- 6
x <- rmvhyper(nn,n,k)
head(x, 20)
counts <- table(x,col(x))
barplot(counts, main="Distribution Hypergéométrique Multivariée",
xlab="X", col=c("darkblue","red","green","yellow"),
legend = rownames(counts), beside=TRUE)
hist(x[,1])
range(x[,1])
range(x[,2])
nn <- 20
n <- c(8,3,9)
k <- 6
x <- rmvhyper(nn,n,k)
head(x, 20)
counts <- tablulate(x,col(x))
library(Rfast)
nn <- 20
n <- c(8,3,9)
k <- 6
x <- rmvhyper(nn,n,k)
head(x, 20)
counts <- coltablulate(x,col(x))
library(Rfast)
nn <- 20
n <- c(8,3,9)
k <- 6
x <- rmvhyper(nn,n,k)
head(x, 20)
counts <- tablulate(x,col(x))
library(Rfast)
nn <- 20
n <- c(8,3,9)
k <- 6
x <- rmvhyper(nn,n,k)
head(x, 20)
counts <- tabulate(x,col(x))
barplot(counts, main="Distribution Hypergéométrique Multivariée",
xlab="X", col=c("darkblue","red","green","yellow"),
legend = rownames(counts), beside=TRUE)
library(Rfast)
nn <- 20
n <- c(8,3,9)
k <- 6
x <- rmvhyper(nn,n,k)
head(x, 20)
counts <- coltabulate(x,col(x))
tabulate(x[,1])
tabulate(x[,2])
library(Rfast)
nn <- 20
n <- c(8,3,9)
k <- 6
x <- rmvhyper(nn,n,k)
head(x, 20)
counts <- tabulate(x,col(x))
barplot(counts, main="Distribution Hypergéométrique Multivariée",
xlab="X", col=c("darkblue","red","green","yellow"),
legend = rownames(counts), beside=TRUE)
col(x)
ncol(x)
library(Rfast)
nn <- 20
n <- c(8,3,9)
k <- 6
x <- rmvhyper(nn,n,k)
head(x, 20)
for(i in 1:ncol(x)){
tbl[i, ] <- tabulate(x[,i])
}
x
class(x)
library(Rfast)
nn <- 20
n <- c(8,3,9)
k <- 6
x <- rmvhyper(nn,n,k)
head(x, 20)
for(i in 1:ncol(x)){
tbl[i, ] <- tabulate(x[1:nrow(x),i])
}
tabulate(x)
tabulate(x[,1])
min(x[,1])
max(x[,1])
tabulate(x[,2])
min(x[,2])
max(x[,2])
max(x[1:nrow(x),2])
x <- rpois(2000, 0.3)
head(x, 20)
hist(x,main="Distribution de Poisson")
x <- rpois(2000, 0.3)
head(x, 20)
hist(x+.5,main="Distribution de Poisson")
x <- rpois(2000, 0.3)
head(x, 20)
hist(x+.001,main="Distribution de Poisson")
render_book("index.Rmd")
render_book("index.Rmd")
library(isteahMAT104)
#' Format cells of a data frame
#' From https://stackoverflow.com/questions/28166168/how-to-change-fontface-bold-italics-for-a-cell-in-a-kable-table-in-rmarkdown
#'@param df data frame
#'@param rows  row(s) of the cell(s) to format
#'@param cols  column(s) of the cell(s) to format
#'@param value format to apply: one of "italics", "bold", "strikethrough"
#'@export
#'
format_cells <- function(df, rows ,cols, value = c("italics", "bold", "strikethrough")){
# select the correct markup
# one * for italics, two ** for bold
map <- setNames(c("*", "**", "~~"), c("italics", "bold", "strikethrough"))
markup <- map[value]
for (r in rows){
for(c in cols){
# Make sure values are not factors
df[[c]] <- as.character( df[[c]])
# Update formatting
df[r, c] <- paste0(markup, df[r, c], markup)
}
}
return(df)
}
setwd("I:/MAT104/isteahMAT104")
library(devtools)
load_all()
library(isteahMAT104)
library(isteahMAT104)
CoinToss()      # n=1, p=0.5
CoinToss(10)      # lancer de 10 pièces, p=0.5
CoinToss(5,0.7) # Lancer de 5 pièces, p=0.7 (pièce trafiquée!)
